/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * Master.java
 *
 * Created on 07/05/2010, 10:58:55
 */
package com.org.view;

import com.org.dao.ConectionODBC;
import com.org.dao.ConexaoHSQL;
import com.org.dao.DuplicidadeDAO;
import com.org.negocio.Configuracao;
import com.org.facade.SessionFacadeImpl;
import com.org.negocio.FiltroArquivo;
import com.org.util.SinanUtil;
import java.awt.Dialog;
import java.io.File;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;

/**
 *
 * @author geraldo
 */
public class Master extends javax.swing.JFrame {

    /**
     * @return the arquivoDbfSalvo
     */
    public static File getArquivoDbfSalvo() {
        return arquivoDbfSalvo;
    }

    public void setVersao(String versao) {
        lblVersaoRodape.setText("Versão " + versao);
    }

    /**
     * @param aArquivoDbfSalvo the arquivoDbfSalvo to set
     */
    public static void setArquivoDbfSalvo(File aArquivoDbfSalvo) {
        arquivoDbfSalvo = aArquivoDbfSalvo;
    }
    SessionFacadeImpl session = new SessionFacadeImpl();
    private static File arquivoDbfSalvo;

    //inserir ícone no form
    // URL url = this.getClass().getResource("/img/icone.png");  
    /**
     * Creates new form Master
     */
    public Master() {
        UIManager.put("FileChooser.lookInLabelText", "Consulte:");
        UIManager.put("FileChooser.lookInLabelMnemonic", "o");
        UIManager.put("FileChooser.fileNameLabelText", "Nome do arquivo:");
        UIManager.put("FileChooser.fileNameLabelMnemonic", "N");
        UIManager.put("FileChooser.filesOfTypeLabelText", "Arquivos do tipo:");
        UIManager.put("FileChooser.filesOfTypeLabelMnemonic", "t");
        UIManager.put("FileChooser.upFolderToolTipText", "Um Nível Acima");
        UIManager.put("FileChooser.upFolderAccessibleName", "Para Cima");
        UIManager.put("FileChooser.homeFolderToolTipText", "Inicio");
        UIManager.put("FileChooser.homeFolderAccessibleName", "Inicio");
        UIManager.put("FileChooser.newFolderToolTipText", "Criar uma Nova Pasta");
        UIManager.put("FileChooser.newFolderAccessibleName", "Nova Pasta");
        UIManager.put("FileChooser.listViewButtonToolTipText", "Lista");
        UIManager.put("FileChooser.listViewButtonAccessibleName", "Lista");
        UIManager.put("FileChooser.detailsViewButtonToolTipText", "Detalhes");
        UIManager.put("FileChooser.detailsViewButtonAccessibleName", "Detalhes");
        UIManager.put("FileChooser.cancelButtonText", "Cancelar");
        UIManager.put("FileChooser.cancelButtonMnemonic", "C");
        UIManager.put("FileChooser.cancelButtonToolTipText", "Cancelar");
        UIManager.put("FileChooser.openButtonText", "Abrir");
        UIManager.put("FileChooser.openButtonMnemonic", "A");
        UIManager.put("FileChooser.saveButtonText", "Salvar");
        UIManager.put("FileChooser.saveButtonToolTipText", "Salvar Arquivo");
        initComponents();
        SessionFacadeImpl.setDbf(true);
        //inicia combo dos grupos
        ComboBoxModel modelo;
        modelo = new DefaultComboBoxModel(this.session.retornaGrupos());
        this.cmbFiltroGrupoRelatorios.setModel(modelo);
        setVersao(SinanUtil.getVersaoSinanRelatorios());
        lblFiltroAgravo.setVisible(false);
        cmbFiltroAgravo.setVisible(false);
        lblSubgrupoRelatórios.setVisible(false);
        cmbFiltroSubgrupoRelatorios.setVisible(false);

        // inserir ícone no form
        // this.setIconImage(Toolkit.getDefaultToolkit().getImage(url));  
    }

    public static void formataData(JFormattedTextField txtField, JFormattedTextField txtFieldFocus, JButton btnCalcular) {
        String s = txtField.getText();
        int tamanho = s.length();
        if (tamanho == 2 || tamanho == 5) {
            txtField.setText(txtField.getText() + "/");
        }
        if (tamanho == 10) {
            if (btnCalcular != null) {
                btnCalcular.requestFocus();
            } else {
                txtFieldFocus.requestFocus();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        pnlFitroTipoRelatorio = new javax.swing.JPanel();
        rbtDBF = new javax.swing.JRadioButton();
        rbtPostgres = new javax.swing.JRadioButton();
        lblBaseDados = new javax.swing.JLabel();
        lblVersao = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        cmbFiltroGrupoRelatorios = new javax.swing.JComboBox();
        cmbFiltroRelatorio = new javax.swing.JComboBox();
        cmbFiltroAgravo = new javax.swing.JComboBox();
        cmbFiltroSubgrupoRelatorios = new javax.swing.JComboBox<>();
        lblGrupoRelatórios = new javax.swing.JLabel();
        lblSubgrupoRelatórios = new javax.swing.JLabel();
        lblFiltroRelatorio = new javax.swing.JLabel();
        lblFiltroAgravo = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        lblVersaoRodape = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SINAN Relatórios");
        setLocationByPlatform(true);
        setResizable(false);

        pnlFitroTipoRelatorio.setBorder(javax.swing.BorderFactory.createTitledBorder("Selecione o relatório desejado"));

        rbtDBF.setSelected(true);
        rbtDBF.setText("DBF");
        rbtDBF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtDBFActionPerformed(evt);
            }
        });

        rbtPostgres.setText("Postgres");
        rbtPostgres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtPostgresActionPerformed(evt);
            }
        });

        lblBaseDados.setText("Base de dados:");

        cmbFiltroGrupoRelatorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFiltroGrupoRelatoriosActionPerformed(evt);
            }
        });

        cmbFiltroRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFiltroRelatorioActionPerformed(evt);
            }
        });

        cmbFiltroAgravo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFiltroAgravoActionPerformed(evt);
            }
        });

        cmbFiltroSubgrupoRelatorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFiltroSubgrupoRelatoriosActionPerformed(evt);
            }
        });

        lblGrupoRelatórios.setLabelFor(lblGrupoRelatórios);
        lblGrupoRelatórios.setText("Grupo de Relatórios:");

        lblSubgrupoRelatórios.setText("Pactuações:");

        lblFiltroRelatorio.setText("Relatório:");

        lblFiltroAgravo.setText("Agravo:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblGrupoRelatórios)
                    .addComponent(lblFiltroAgravo)
                    .addComponent(lblFiltroRelatorio)
                    .addComponent(lblSubgrupoRelatórios))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbFiltroRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFiltroAgravo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFiltroGrupoRelatorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFiltroSubgrupoRelatorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFiltroGrupoRelatorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGrupoRelatórios))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFiltroAgravo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFiltroAgravo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFiltroSubgrupoRelatorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSubgrupoRelatórios))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFiltroRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFiltroRelatorio))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlFitroTipoRelatorioLayout = new javax.swing.GroupLayout(pnlFitroTipoRelatorio);
        pnlFitroTipoRelatorio.setLayout(pnlFitroTipoRelatorioLayout);
        pnlFitroTipoRelatorioLayout.setHorizontalGroup(
            pnlFitroTipoRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFitroTipoRelatorioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBaseDados, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtDBF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtPostgres)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblVersao, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(249, 249, 249))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlFitroTipoRelatorioLayout.setVerticalGroup(
            pnlFitroTipoRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFitroTipoRelatorioLayout.createSequentialGroup()
                .addGroup(pnlFitroTipoRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFitroTipoRelatorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBaseDados)
                        .addComponent(rbtDBF)
                        .addComponent(rbtPostgres))
                    .addComponent(lblVersao, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pnlFitroTipoRelatorio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblVersaoRodape, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlFitroTipoRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblVersaoRodape, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(624, 584));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

/*private void cmbFiltroAgravoActionPerformed(java.awt.event.ActionEvent evt) {                                                
        this.cmbFiltroAgravoActionPerformed();
    }   
	*/
 /*
    private void cmbFiltroRelatorioActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        jTabbedPane1.removeAll();
        if (this.cmbFiltroRelatorio.getSelectedItem() != null) {
            if (!this.cmbFiltroRelatorio.getSelectedItem().toString().equals("Selecione o Relatório")) {

                //bloco retirado, pois essa função está sendo feita pelo bloco do grupo do relatório
                //modificado em 14/06/2011, conforme solicitação da Ana Medeiros
               
                if (cmbFiltroRelatorio.getSelectedItem().toString().equals("Regularidade na alimentação do Sinan")) {
                    rbtPostgres.setSelected(false);
                    rbtDBF.setSelected(true);
                    SessionFacadeImpl.setDbf(true);
                }
 /*bloco retirado para possibilitar a escolha do reltório também em DBF
                if (cmbFiltroRelatorio.getSelectedItem().toString().equals("Proporção de doenças exantemáticas investigados oportuna e adequadamente")) {
                    if (rbtDBF.isSelected()) {
                        mensagem("Relatório disponível somente em Postgres");
                    }
                    rbtPostgres.setSelected(true);
                    rbtDBF.setSelected(false);
                    SessionFacadeImpl.setDbf(false);

                }
                jTabbedPane1.addTab(cmbFiltroRelatorio.getSelectedItem().toString(), session.retornaPanel(this.cmbFiltroRelatorio.getSelectedItem().toString()));
            }
        }
    }  
	*/

    private void cmbFiltroGrupoRelatoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFiltroGrupoRelatoriosActionPerformed
        //limpa combos
        this.cmbFiltroAgravo.removeAllItems();
        this.cmbFiltroRelatorio.removeAllItems();
        this.cmbFiltroSubgrupoRelatorios.removeAllItems();
        /**
         * SINAN_RELATORIO Novo Filtro adicionado
         */
        //carrega combo de agravos ou relatorio
        // se outros relatorios mostrar agravos, senao mostrar todos os relatorios na combo relatorios
        ComboBoxModel modelo;

        //esse bloco foi inserido para apresentar a tela do relatório de regularidade
        //quando selecionar o grupo de relatório Regularidade na alimentação do Sinan
        //modificado em 14/06/2011, conforme solicitação da Ana Medeiros
       /*if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("Regularidade na alimentação do Sinan")) {
            rbtPostgres.setSelected(false);
            rbtDBF.setSelected(true);
            SessionFacadeImpl.setDbf(true);
            jTabbedPane1.addTab(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString(), session.retornaPanel(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            modelo = new DefaultComboBoxModel(this.session.retornaAgravos(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            this.cmbFiltroAgravo.setModel(modelo);
            this.cmbFiltroAgravoActionPerformed();
            lblFiltroAgravo.setVisible(false);
            cmbFiltroAgravo.setVisible(false);
            lblSubgrupoRelatórios.setVisible(false);
            cmbFiltroSubgrupoRelatorios.setVisible(false);
        }*/ //fim do bloco
        //esse bloco foi inserido para apresentar a tela do relatório de duplicidade
        //quando selecionar o grupo de relatório Duplicidade
        //modificado em 02/02/2012
        /*       else if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("Outros Relatórios")) {
            rbtPostgres.setSelected(false);
            rbtDBF.setSelected(true);
            SessionFacadeImpl.setDbf(true);
            modelo = new DefaultComboBoxModel(
                    this.session.retornaRelatorios(
                            this.cmbFiltroGrupoRelatorios.getSelectedItem().toString(), this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            this.cmbFiltroRelatorio.setModel(modelo);
            // this.cmbFiltroAgravoActionPerformed();
            lblSubgrupoRelatórios.setVisible(false);
            cmbFiltroSubgrupoRelatorios.setVisible(false);
            lblFiltroAgravo.setVisible(false);
            cmbFiltroAgravo.setVisible(false);
            
        }*/ if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("Pactuações Anteriores")) {
            rbtPostgres.setSelected(false);
            rbtDBF.setSelected(true);
            SessionFacadeImpl.setDbf(true);
            modelo = new DefaultComboBoxModel(this.session.retornaSubgrupos(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            this.cmbFiltroSubgrupoRelatorios.setModel(modelo);
            // this.cmbFiltroAgravoActionPerformed();
            lblSubgrupoRelatórios.setVisible(true);
            cmbFiltroSubgrupoRelatorios.setVisible(true);
            lblFiltroAgravo.setVisible(false);
            cmbFiltroAgravo.setVisible(false);

            //fim do bloco   
        } //esse bloco foi inserido para criar a opção de subgrupo
        /*else if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("COAP - Encerramento Oportuno da Investigação")) {
            rbtPostgres.setSelected(false);
            rbtDBF.setSelected(true);
            SessionFacadeImpl.setDbf(true);
            jTabbedPane1.addTab(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString(), session.retornaPanel(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            modelo = new DefaultComboBoxModel(this.session.retornaAgravos(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            this.cmbFiltroAgravo.setModel(modelo);
            this.cmbFiltroAgravoActionPerformed();
            lblFiltroAgravo.setVisible(false);
            cmbFiltroAgravo.setVisible(false);
            lblSubgrupoRelatórios.setVisible(false);
            cmbFiltroSubgrupoRelatorios.setVisible(false);

            //fim do bloco
        } else if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("Proporção de casos DNCI encerrados em até 60 dias após notificação")) {
            rbtPostgres.setSelected(false);
            rbtDBF.setSelected(true);
            SessionFacadeImpl.setDbf(true);
            jTabbedPane1.addTab(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString(), session.retornaPanel(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            modelo = new DefaultComboBoxModel(this.session.retornaAgravos(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            this.cmbFiltroAgravo.setModel(modelo);
            this.cmbFiltroAgravoActionPerformed();
            lblFiltroAgravo.setVisible(false);
            cmbFiltroAgravo.setVisible(false);
            lblSubgrupoRelatórios.setVisible(false);
            cmbFiltroSubgrupoRelatorios.setVisible(false);

            //fim do bloco
        }*//* else if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("Número de semanas epidemiológicas com informação")) {
            rbtPostgres.setSelected(false);
            rbtDBF.setSelected(true);
            SessionFacadeImpl.setDbf(true);
            jTabbedPane1.addTab(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString(), session.retornaPanel(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            modelo = new DefaultComboBoxModel(this.session.retornaAgravos(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            this.cmbFiltroAgravo.setModel(modelo);
            this.cmbFiltroAgravoActionPerformed();
            lblFiltroAgravo.setVisible(false);
            cmbFiltroAgravo.setVisible(false);
            lblSubgrupoRelatórios.setVisible(false);
            cmbFiltroSubgrupoRelatorios.setVisible(false);

            //fim do bloco
        }*/ /*else if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("Duplicidade")) {

            /*else if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("Duplicidade")) {
                rbtPostgres.setSelected(false);
                rbtDBF.setSelected(true);
                SessionFacadeImpl.setDbf(true);
                jTabbedPane1.addTab(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString(), session.retornaPanel(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
                modelo = new DefaultComboBoxModel(this.session.retornaAgravos(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
                this.cmbFiltroAgravo.setModel(modelo);
                this.cmbFiltroAgravoActionPerformed();
                lblFiltroAgravo.setVisible(false);
                cmbFiltroAgravo.setVisible(false);

                //fim do bloco
            }*/ else if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("Recebimento de Lotes")) {
            rbtPostgres.setSelected(false);
            rbtDBF.setSelected(true);
            SessionFacadeImpl.setDbf(true);
            jTabbedPane1.addTab(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString(), session.retornaPanel(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            modelo = new DefaultComboBoxModel(this.session.retornaAgravos(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            this.cmbFiltroAgravo.setModel(modelo);
            this.cmbFiltroAgravoActionPerformed();
            lblFiltroAgravo.setVisible(false);
            cmbFiltroAgravo.setVisible(false);
            lblSubgrupoRelatórios.setVisible(false);
            cmbFiltroSubgrupoRelatorios.setVisible(false);

            //fim do bloco
        } /*else if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("Outros relatórios")) {
            modelo = new DefaultComboBoxModel(this.session.retornaAgravos(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            this.cmbFiltroAgravo.setModel(modelo);
            lblFiltroAgravo.setVisible(true);
            cmbFiltroAgravo.setVisible(true);

        }         
        else {

            lblSubgrupoRelatórios.setVisible(false);
            cmbFiltroSubgrupoRelatorios.setVisible(false);

        }*/ else {

            modelo = new DefaultComboBoxModel(this.session.retornaAgravos(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            this.cmbFiltroAgravo.setModel(modelo);
            this.cmbFiltroAgravoActionPerformed();
            lblFiltroAgravo.setVisible(false);
            cmbFiltroAgravo.setVisible(false);
            lblSubgrupoRelatórios.setVisible(false);
            cmbFiltroSubgrupoRelatorios.setVisible(false);

        }

        //        if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("Regularidade portaria 3252")) {
        //            this.cmbFiltroAgravoActionPerformed();
        //        }
    }//GEN-LAST:event_cmbFiltroGrupoRelatoriosActionPerformed

    private void rbtPostgresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtPostgresActionPerformed
        rbtDBF.setSelected(false);
        SessionFacadeImpl.setDbf(false);
        limpaFormulario();
    }//GEN-LAST:event_rbtPostgresActionPerformed

    private void rbtDBFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtDBFActionPerformed
        rbtPostgres.setSelected(false);
        SessionFacadeImpl.setDbf(true);
        limpaFormulario();
    }//GEN-LAST:event_rbtDBFActionPerformed

    private void cmbFiltroSubgrupoRelatoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFiltroSubgrupoRelatoriosActionPerformed
        // TODO add your handling code here:
        this.cmbFiltroAgravo.removeAllItems();
        this.cmbFiltroRelatorio.removeAllItems();

        ComboBoxModel modelo;

        if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("COAP - Encerramento Oportuno da Investigação")) {
            rbtPostgres.setSelected(false);
            rbtDBF.setSelected(true);
            SessionFacadeImpl.setDbf(true);
            jTabbedPane1.addTab(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString(), session.retornaPanel(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            modelo = new DefaultComboBoxModel(this.session.retornaAgravos(this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));
            this.cmbFiltroAgravo.setModel(modelo);
            this.cmbFiltroAgravoActionPerformed();
            lblFiltroAgravo.setVisible(false);
            cmbFiltroAgravo.setVisible(false);
            lblSubgrupoRelatórios.setVisible(false);
            cmbFiltroSubgrupoRelatorios.setVisible(false);

            //fim do bloco
        } else if (this.cmbFiltroSubgrupoRelatorios.getSelectedItem() != null) {

            modelo = new DefaultComboBoxModel(
                    this.session.retornaRelatorios(
                            this.cmbFiltroSubgrupoRelatorios.getSelectedItem().toString(), this.cmbFiltroSubgrupoRelatorios.getSelectedItem().toString()));
            this.cmbFiltroRelatorio.setModel(modelo);
        }

    }//GEN-LAST:event_cmbFiltroSubgrupoRelatoriosActionPerformed

    private void cmbFiltroAgravoActionPerformed() {
        //carrega relatorios
        if (this.cmbFiltroAgravo.getSelectedItem() != null) {
            ComboBoxModel modelo;
            modelo = new DefaultComboBoxModel(
                    this.session.retornaRelatorios(
                            this.cmbFiltroGrupoRelatorios.getSelectedItem().toString(), this.cmbFiltroAgravo.getSelectedItem().toString()));
            this.cmbFiltroRelatorio.setModel(modelo);
        }

    }

    private void cmbFiltroAgravoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFiltroAgravoActionPerformed
        this.cmbFiltroAgravoActionPerformed();
    }//GEN-LAST:event_cmbFiltroAgravoActionPerformed

    private void cmbFiltroRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFiltroRelatorioActionPerformed
        jTabbedPane1.removeAll();
        if (this.cmbFiltroRelatorio.getSelectedItem() != null) {
            if (!this.cmbFiltroRelatorio.getSelectedItem().toString().equals("Selecione o Relatório")) {
                
                //bloco retirado, pois essa função está sendo feita pelo bloco do grupo do relatório
                //modificado em 14/06/2011, conforme solicitação da Ana Medeiros
                /*
                if (cmbFiltroRelatorio.getSelectedItem().toString().equals("Regularidade na alimentação do Sinan")) {
                    rbtPostgres.setSelected(false);
                    rbtDBF.setSelected(true);
                    SessionFacadeImpl.setDbf(true);
                }*/
                /*bloco retirado para possibilitar a escolha do reltório também em DBF
                if (cmbFiltroRelatorio.getSelectedItem().toString().equals("Proporção de doenças exantemáticas investigados oportuna e adequadamente")) {
                    if (rbtDBF.isSelected()) {
                        mensagem("Relatório disponível somente em Postgres");
                    }
                    rbtPostgres.setSelected(true);
                    rbtDBF.setSelected(false);
                    SessionFacadeImpl.setDbf(false);

                }*/
                 if (this.cmbFiltroGrupoRelatorios.getSelectedItem().toString().equals("Pactuação Interfederativa 2017 a 2021")) {
                    jTabbedPane1.addTab(cmbFiltroRelatorio.getSelectedItem().toString(), session.retornaPanel(this.cmbFiltroRelatorio.getSelectedItem().toString(),this.cmbFiltroGrupoRelatorios.getSelectedItem().toString()));

                }else{
                     jTabbedPane1.addTab(cmbFiltroRelatorio.getSelectedItem().toString(), session.retornaPanel(this.cmbFiltroRelatorio.getSelectedItem().toString()));
                 
                 }
                
            }
        }
    }//GEN-LAST:event_cmbFiltroRelatorioActionPerformed


    private void limpaFormulario() {
        jTabbedPane1.removeAll();
        cmbFiltroAgravo.removeAllItems();
        cmbFiltroGrupoRelatorios.setSelectedIndex(0);
        cmbFiltroRelatorio.removeAllItems();
    }

    /**/
    public static boolean escolherDBF() {
        if (SessionFacadeImpl.isDbf()) {
            JFileChooser fileopen = new JFileChooser();
            FiltroArquivo filtro = new FiltroArquivo();
            filtro.addExtension("dbf");
            filtro.setDescription("Arquivo DBF");
            filtro.addInicioNome(SessionFacadeImpl.getNomeDbf());
            fileopen.addChoosableFileFilter(filtro);
            fileopen.setMultiSelectionEnabled(true);
            Configuracao conf = new Configuracao();
            File file2 = new File(conf.getCaminho());
            fileopen.setCurrentDirectory(file2);

            int ret = fileopen.showDialog(null, "Abrir DBF");

            if (ret == JFileChooser.APPROVE_OPTION) {
                File file = fileopen.getSelectedFile();
                conf.setCaminhoArquivo(file.toString());
                conf.setPropriedade("caminho", file.getPath());
                System.out.println(file);
                return true;
            }
        }
        return false;
    }

    public static boolean setNomeArquivoDBF() {

        JFileChooser filesave = new JFileChooser();
        FiltroArquivo filtro = new FiltroArquivo();
        filtro.addExtension("dbf");
        filtro.setDescription("Arquivo DBF");
        filtro.addInicioNome(SessionFacadeImpl.getNomeDbf());
        filesave.setSelectedFile(new File("output.dbf"));
        filesave.setDialogTitle("Informe o local e nome do arquivo DBF a ser salvo");
        filesave.addChoosableFileFilter(filtro);
        Configuracao conf = new Configuracao();
        File file2 = new File(conf.getCaminho());
        filesave.setCurrentDirectory(file2);
        int ret = filesave.showSaveDialog(filesave);
        if (ret == JFileChooser.APPROVE_OPTION) {
            arquivoDbfSalvo = filesave.getSelectedFile();
            System.out.println(arquivoDbfSalvo.getName());
//                conf.setCaminhoArquivo(file.toString());
            conf.setPropriedade("arquivo", arquivoDbfSalvo.getPath());
            System.out.println(arquivoDbfSalvo);
            return true;
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
                } catch (Exception exception) {
                    System.out.println("Não foi possível trocar o look and feel");
                }
                new Master().setVisible(true);

            }
        });
    }

    public static void mensagem(String message) {
        JOptionPane.showMessageDialog(new JFrame(), message, "Mensagem",
                JOptionPane.INFORMATION_MESSAGE);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JComboBox cmbFiltroAgravo;
    private javax.swing.JComboBox cmbFiltroGrupoRelatorios;
    private javax.swing.JComboBox cmbFiltroRelatorio;
    private javax.swing.JComboBox<String> cmbFiltroSubgrupoRelatorios;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblBaseDados;
    private javax.swing.JLabel lblFiltroAgravo;
    private javax.swing.JLabel lblFiltroRelatorio;
    private javax.swing.JLabel lblGrupoRelatórios;
    private javax.swing.JLabel lblSubgrupoRelatórios;
    private javax.swing.JLabel lblVersao;
    private javax.swing.JLabel lblVersaoRodape;
    private javax.swing.JPanel pnlFitroTipoRelatorio;
    private javax.swing.JRadioButton rbtDBF;
    private javax.swing.JRadioButton rbtPostgres;
    // End of variables declaration//GEN-END:variables
}
